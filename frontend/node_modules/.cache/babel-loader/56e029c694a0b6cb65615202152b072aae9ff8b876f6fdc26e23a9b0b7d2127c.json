{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OMEN\\\\Downloads\\\\trendAIApp\\\\trendAIApp\\\\src\\\\components\\\\CryptoMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ComposableMap, Geographies, Geography, Marker } from \"react-simple-maps\";\nimport ReactTooltip from \"react-tooltip\";\nimport worldGeo from \"../assets/world-110m.json\"; // Download from TopoJSON and convert it if needed\nimport trendsData from \"../data/trends.json\"; // Put it in src/data or use fetch if in public\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst markerCoordinates = {\n  \"United States\": [-100, 40],\n  Japan: [138, 36],\n  Brazil: [-51, -10],\n  Germany: [10, 51]\n  // Add more region coordinates as needed\n};\nconst CryptoMap = () => {\n  _s();\n  const [tooltipContent, setTooltipContent] = useState(\"\");\n  const [trends, setTrends] = useState([]);\n  useEffect(() => {\n    setTrends(trendsData);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-white p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Crypto Trends by Region\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ComposableMap, {\n      projectionConfig: {\n        scale: 180\n      },\n      width: 800,\n      height: 400,\n      style: {\n        width: \"100%\",\n        height: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Geographies, {\n        geography: worldGeo,\n        children: ({\n          geographies\n        }) => geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n          geography: geo,\n          fill: \"#1e293b\",\n          stroke: \"#334155\",\n          style: {\n            default: {\n              outline: \"none\"\n            }\n          }\n        }, geo.rsmKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), trends.map((trend, i) => {\n        const coords = markerCoordinates[trend.region];\n        if (!coords) return null;\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          coordinates: coords,\n          onMouseEnter: () => {\n            setTooltipContent(`\n                  ${trend.region} | ${trend.coin}<br/>\n                  Platform: ${trend.platform}<br/>\n                  Mentions: ${trend.mentions}<br/>\n                  Sentiment: ${trend.sentiment}<br/>\n                  <img src=\"${trend.top_meme}\" alt=\"meme\" width=\"100\"/><br/>\n                  <video src=\"${trend.top_video}\" width=\"150\" controls autoplay muted loop/>\n                `);\n          },\n          onMouseLeave: () => setTooltipContent(\"\"),\n          children: /*#__PURE__*/_jsxDEV(\"circle\", {\n            r: 6,\n            fill: \"#0ea5e9\",\n            stroke: \"#38bdf8\",\n            strokeWidth: 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n      html: true,\n      children: tooltipContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(CryptoMap, \"sF5SAzaQYXStFvs2iIfvaZZs3GY=\");\n_c = CryptoMap;\nexport default CryptoMap;\nvar _c;\n$RefreshReg$(_c, \"CryptoMap\");","map":{"version":3,"names":["React","useState","useEffect","ComposableMap","Geographies","Geography","Marker","ReactTooltip","worldGeo","trendsData","jsxDEV","_jsxDEV","markerCoordinates","Japan","Brazil","Germany","CryptoMap","_s","tooltipContent","setTooltipContent","trends","setTrends","className","children","fileName","_jsxFileName","lineNumber","columnNumber","projectionConfig","scale","width","height","style","geography","geographies","map","geo","fill","stroke","default","outline","rsmKey","trend","i","coords","region","coordinates","onMouseEnter","coin","platform","mentions","sentiment","top_meme","top_video","onMouseLeave","r","strokeWidth","html","_c","$RefreshReg$"],"sources":["C:/Users/OMEN/Downloads/trendAIApp/trendAIApp/src/components/CryptoMap.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { ComposableMap, Geographies, Geography, Marker } from \"react-simple-maps\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport worldGeo from \"../assets/world-110m.json\"; // Download from TopoJSON and convert it if needed\r\nimport trendsData from \"../data/trends.json\"; // Put it in src/data or use fetch if in public\r\n\r\nconst markerCoordinates = {\r\n  \"United States\": [-100, 40],\r\n  Japan: [138, 36],\r\n  Brazil: [-51, -10],\r\n  Germany: [10, 51]\r\n  // Add more region coordinates as needed\r\n};\r\n\r\nconst CryptoMap = () => {\r\n  const [tooltipContent, setTooltipContent] = useState(\"\");\r\n  const [trends, setTrends] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setTrends(trendsData);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"text-white p-4\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">Crypto Trends by Region</h2>\r\n      <ComposableMap\r\n        projectionConfig={{ scale: 180 }}\r\n        width={800}\r\n        height={400}\r\n        style={{ width: \"100%\", height: \"auto\" }}\r\n      >\r\n        <Geographies geography={worldGeo}>\r\n          {({ geographies }) =>\r\n            geographies.map((geo) => (\r\n              <Geography\r\n                key={geo.rsmKey}\r\n                geography={geo}\r\n                fill=\"#1e293b\"\r\n                stroke=\"#334155\"\r\n                style={{ default: { outline: \"none\" } }}\r\n              />\r\n            ))\r\n          }\r\n        </Geographies>\r\n\r\n        {trends.map((trend, i) => {\r\n          const coords = markerCoordinates[trend.region];\r\n          if (!coords) return null;\r\n          return (\r\n            <Marker\r\n              key={i}\r\n              coordinates={coords}\r\n              onMouseEnter={() => {\r\n                setTooltipContent(`\r\n                  ${trend.region} | ${trend.coin}<br/>\r\n                  Platform: ${trend.platform}<br/>\r\n                  Mentions: ${trend.mentions}<br/>\r\n                  Sentiment: ${trend.sentiment}<br/>\r\n                  <img src=\"${trend.top_meme}\" alt=\"meme\" width=\"100\"/><br/>\r\n                  <video src=\"${trend.top_video}\" width=\"150\" controls autoplay muted loop/>\r\n                `);\r\n              }}\r\n              onMouseLeave={() => setTooltipContent(\"\")}\r\n            >\r\n              <circle r={6} fill=\"#0ea5e9\" stroke=\"#38bdf8\" strokeWidth={2} />\r\n            </Marker>\r\n          );\r\n        })}\r\n      </ComposableMap>\r\n      <ReactTooltip html={true}>{tooltipContent}</ReactTooltip>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CryptoMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}