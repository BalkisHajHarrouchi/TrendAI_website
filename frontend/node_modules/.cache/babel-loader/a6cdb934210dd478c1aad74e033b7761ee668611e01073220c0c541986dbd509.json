{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OMEN\\\\Downloads\\\\trendAIApp\\\\trendAIApp\\\\src\\\\components\\\\CryptoMap.jsx\";\nimport React from \"react\";\nimport { ComposableMap, Geographies, Geography, Marker } from \"react-simple-maps\";\nimport { geoCentroid } from \"d3-geo\";\nimport worldGeo from \"../data/world-110m.json\"; // You'll need to download and place this\nimport countriesData from \"../data/trendData.json\"; // JSON data like you provided\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst markerColors = {\n  positive: \"rgb(0 255 0 / 0.8)\",\n  // green\n  negative: \"rgb(255 0 0 / 0.8)\",\n  // red\n  neutral: \"rgb(255 255 0 / 0.8)\" // yellow\n};\nconst TrendMap = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative p-4 bg-white/5 rounded-xl shadow-lg backdrop-blur-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl md:text-2xl font-semibold text-white/80 text-center mb-4\",\n      children: \"Trending Crypto Globally\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ComposableMap, {\n      projectionConfig: {\n        rotate: [-10, 0, 0],\n        scale: 150\n      },\n      style: {\n        width: \"100%\",\n        height: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Geographies, {\n        geography: worldGeo,\n        children: ({\n          geographies\n        }) => geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n          geography: geo,\n          style: {\n            default: {\n              fill: \"#0f172a\",\n              outline: \"none\"\n            },\n            hover: {\n              fill: \"#1e293b\",\n              outline: \"none\"\n            },\n            pressed: {\n              fill: \"#334155\",\n              outline: \"none\"\n            }\n          }\n        }, geo.rsmKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), countriesData.map(({\n        isoCode,\n        country,\n        coin,\n        trend_label\n      }, idx) => {\n        const centroid = geoCentroid(worldGeo.features.find(f => f.properties.ISO_A2 === isoCode));\n        if (!centroid) return null;\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          coordinates: centroid,\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            r: 6,\n            fill: markerColors[trend_label],\n            stroke: \"#ffffffaa\",\n            strokeWidth: 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            textAnchor: \"middle\",\n            y: -10,\n            style: {\n              fontFamily: \"sans-serif\",\n              fontSize: \"0.7rem\",\n              fill: \"#fff\"\n            },\n            children: coin\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_c = TrendMap;\nexport default TrendMap;\nvar _c;\n$RefreshReg$(_c, \"TrendMap\");","map":{"version":3,"names":["React","ComposableMap","Geographies","Geography","Marker","geoCentroid","worldGeo","countriesData","jsxDEV","_jsxDEV","markerColors","positive","negative","neutral","TrendMap","className","children","fileName","_jsxFileName","lineNumber","columnNumber","projectionConfig","rotate","scale","style","width","height","geography","geographies","map","geo","default","fill","outline","hover","pressed","rsmKey","isoCode","country","coin","trend_label","idx","centroid","features","find","f","properties","ISO_A2","coordinates","r","stroke","strokeWidth","textAnchor","y","fontFamily","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/OMEN/Downloads/trendAIApp/trendAIApp/src/components/CryptoMap.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { ComposableMap, Geographies, Geography, Marker } from \"react-simple-maps\";\r\nimport { geoCentroid } from \"d3-geo\";\r\nimport worldGeo from \"../data/world-110m.json\"; // You'll need to download and place this\r\nimport countriesData from \"../data/trendData.json\"; // JSON data like you provided\r\n\r\nconst markerColors = {\r\n  positive: \"rgb(0 255 0 / 0.8)\", // green\r\n  negative: \"rgb(255 0 0 / 0.8)\", // red\r\n  neutral: \"rgb(255 255 0 / 0.8)\" // yellow\r\n};\r\n\r\nconst TrendMap = () => {\r\n  return (\r\n    <div className=\"relative p-4 bg-white/5 rounded-xl shadow-lg backdrop-blur-md\">\r\n      <h2 className=\"text-xl md:text-2xl font-semibold text-white/80 text-center mb-4\">\r\n        Trending Crypto Globally\r\n      </h2>\r\n\r\n      <ComposableMap\r\n        projectionConfig={{\r\n          rotate: [-10, 0, 0],\r\n          scale: 150\r\n        }}\r\n        style={{ width: \"100%\", height: \"auto\" }}\r\n      >\r\n        <Geographies geography={worldGeo}>\r\n          {({ geographies }) =>\r\n            geographies.map((geo) => (\r\n              <Geography\r\n                key={geo.rsmKey}\r\n                geography={geo}\r\n                style={{\r\n                  default: {\r\n                    fill: \"#0f172a\",\r\n                    outline: \"none\"\r\n                  },\r\n                  hover: {\r\n                    fill: \"#1e293b\",\r\n                    outline: \"none\"\r\n                  },\r\n                  pressed: {\r\n                    fill: \"#334155\",\r\n                    outline: \"none\"\r\n                  }\r\n                }}\r\n              />\r\n            ))\r\n          }\r\n        </Geographies>\r\n\r\n        {countriesData.map(({ isoCode, country, coin, trend_label }, idx) => {\r\n          const centroid = geoCentroid(\r\n            worldGeo.features.find((f) => f.properties.ISO_A2 === isoCode)\r\n          );\r\n          if (!centroid) return null;\r\n\r\n          return (\r\n            <Marker key={idx} coordinates={centroid}>\r\n              <circle\r\n                r={6}\r\n                fill={markerColors[trend_label]}\r\n                stroke=\"#ffffffaa\"\r\n                strokeWidth={1}\r\n              />\r\n              <text\r\n                textAnchor=\"middle\"\r\n                y={-10}\r\n                style={{ fontFamily: \"sans-serif\", fontSize: \"0.7rem\", fill: \"#fff\" }}\r\n              >\r\n                {coin}\r\n              </text>\r\n            </Marker>\r\n          );\r\n        })}\r\n      </ComposableMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrendMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}